[
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "butter",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "filtfilt",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "find_peaks",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "savgol_filter",
        "importPath": "scipy.signal",
        "description": "scipy.signal",
        "isExtraImport": true,
        "detail": "scipy.signal",
        "documentation": {}
    },
    {
        "label": "Processor",
        "kind": 6,
        "importPath": "Processor",
        "description": "Processor",
        "peekOfCode": "class Processor:\n    def __init__(self, Data_pass):\n        self.name = name\n        self.tasks = []\n    def add_task(self, task):\n        self.tasks.append(task)\n    def process(self):\n        print(f\"Processor {self.name} is processing tasks\")\n        for task in self.tasks:\n            task.execute()",
        "detail": "Processor",
        "documentation": {}
    },
    {
        "label": "Waver",
        "kind": 6,
        "importPath": "Waver",
        "description": "Waver",
        "peekOfCode": "class Waver:\n    peak_dtype = np.dtype([\n        (\"position\", int),\n        (\"height\", float),\n        (\"integral\", float),\n        (\"edge_start\", int),\n        (\"edge_end\", int),\n    ])\n    def __init__(self, waveform: np.ndarray):\n        self.waveform = waveform  # 原始波形",
        "detail": "Waver",
        "documentation": {}
    }
]